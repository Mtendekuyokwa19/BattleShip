(()=>{var e={432:e=>{let r=(()=>{class e{#e;#r;#t;shipNumberEquivalent;occupationGrid;direction;set length(e){this.#e=e}set hitFrequency(e){this.#r=e}set sunk(e){this.#t=e}get length(){return this.#e}get hitFrequency(){return this.#r}get sunk(){return this.#t}hit(){this.#r+=1}isSunk(){return this.#r===this.#e}sendShots(e,r){return r[e.xCoordinate][e.yCoordinate]=8,r}shipStruck(e,r){return 8===r[e.xCoordinate][e.yCoordinate]&&(this.hit(),!0)}}class r{playerBoard=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]];receiveAttack(e){}missedAttacks(){}placeShip(e,r,t){return"north"===t.direction?this.#n(e,r,t):this.#o(e,r,t)}#o(e,r,n){let o=e;n.length<r.yCoordinate&&(r.yCoordinate=r.yCoordinate-n.length+1),n.occupationGrid=new t(r.yCoordinate,r.yCoordinate+n.length);for(let e=0;e<n.length;e++)o[r.xCoordinate][r.yCoordinate+e]=n.shipNumberEquivalent;return o}#n(e,r,n){let o=e;n.length>r.xCoordinate&&(r.xCoordinate=r.xCoordinate+(n.length-r.xCoordinate)-1),n.occupationGrid=new t(r.xCoordinate-n.length,r.xCoordinate);for(let e=0;e<n.length;e++)o[r.xCoordinate-e][r.yCoordinate]=n.shipNumberEquivalent;return o}resetBoard(){return[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]]}}class t{constructor(e,r){this.highPoint=e,this.lowPoint=r}}return{Carrier:class extends e{constructor(e){super(),super.length=5,this.shipNumberEquivalent=1,super.direction=e}},Destroyer:class extends e{constructor(e){super(),super.length=2,this.shipNumberEquivalent=5,super.direction=e}},Submarine:class extends e{constructor(e){super(),super.direction=e,super.length=3,this.shipNumberEquivalent=4}},BattleShip:class extends e{constructor(e){super(),super.length=4,super.direction=e,this.shipNumberEquivalent=2}},Cruiser:class extends e{constructor(e){super(),super.length=3,this.shipNumberEquivalent=3,super.direction=e}},Gameboard:r,coordinates:class{constructor(e,r){this.xCoordinate=e,this.yCoordinate=r}},player:class{board=new r;constructor(e){this.name=e}}}})();e.exports=r},157:(e,r,t)=>{const n=t(432);let o=(()=>{function e(){return{carrier:new n.Carrier("north"),battleship:new n.BattleShip("north"),cruiser:new n.Cruiser("north"),destroyer:new n.Destroyer("east"),submarine:new n.Submarine("north")}}return new n.player("playerOne"),new n.player("playerTwo"),{setUpShips:function(r){console.log("setup the cordinates");let t=new n.coordinates(parseInt(prompt("enter")),parseInt(prompt("enter")));r.board.placeShip(r.board.playerBoard,t,e().battleship);let o=new n.coordinates(parseInt(prompt("enter")),parseInt(prompt("enter")));r.board.placeShip(r.board.playerBoard,o,e().cruiser);let s=new n.coordinates(parseInt(prompt("enter")),parseInt(prompt("enter")));r.board.placeShip(r.board.playerBoard,s,e().carrier);let i=new n.coordinates(parseInt(prompt("enter")),parseInt(prompt("enter")));r.board.placeShip(r.board.playerBoard,i,e().submarine);for(let t=0;t<3;t++){let t=new n.coordinates(parseInt(prompt("enter")),parseInt(prompt("enter")));r.board.placeShip(r.board.playerBoard,t,e().destroyer)}return r.board.playerBoard}}})();e.exports=o}},r={};function t(n){var o=r[n];if(void 0!==o)return o.exports;var s=r[n]={exports:{}};return e[n](s,s.exports,t),s.exports}t.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return t.d(r,{a:r}),r},t.d=(e,r)=>{for(var n in r)t.o(r,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},t.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),(()=>{"use strict";var e=t(157),r=t.n(e),n=t(432),o=t.n(n);console.log(r().setUpShips(new(o().player)("austin")))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,